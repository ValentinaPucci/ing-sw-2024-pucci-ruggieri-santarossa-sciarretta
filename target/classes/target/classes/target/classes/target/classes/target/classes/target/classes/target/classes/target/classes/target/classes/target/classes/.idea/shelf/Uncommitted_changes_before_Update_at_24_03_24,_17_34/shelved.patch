Index: src/main/java/it/polimi/ingsw/model/DiagonalPatternObjectiveCard.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package it.polimi.ingsw.model;\n\n/**\n * The following class describe those objective cards that deal\n * with ** diagonal ** patter recognition of cards with respect to the board configuration:\n * There are 2 possible (geometric) patterns of three cards each. In order to distinguish\n * the cards in the patter to recognise, we only need to know the color of each. It is useful\n * to implements some methods that can achieve our goals in terms of sub-matrices encoding.\n */\npublic class DiagonalPatternObjectiveCard extends ObjectiveCard {\n\n    /**\n     * This attributes let us use all the methods we\n     * implemented in Personal board. Dim = 4 x 4;\n     */\n    public PersonalBoard aux_personal_board;\n    public ScoreStrategy score_strategy;\n\n    /**\n     * @param id\n     * @param orientation\n     * @param points\n     */\n    public DiagonalPatternObjectiveCard(int id, Orientation orientation, int points) {\n        super(id, orientation, points);\n        this.aux_personal_board = new PersonalBoard(4);\n        this.score_strategy = new DiagonalPatternScoreStrategy();\n    }\n\n    /**\n     * This method is an initializer; in fact we initialize auxiliary\n     * cards that are out of the deck. In general their id does not make\n     * any sense. For the sake of simplicity, we assume that those cards\n     * have id set to -1;\n     *\n     * Remark: Both increasing diagonal pattern and decreasing diagonal\n     * pattern deal with cards of the SAME color.\n     *\n     * @requires\n     *      color == RED || color == BLUE\n     * @param color\n     */\n    public void init_objIncreasingDiagonal(Color color) {\n\n        ResourceCard card1 = new ResourceCard(-1, Orientation.FRONT, color);\n        ResourceCard card2 = new ResourceCard(-1, Orientation.FRONT, color);\n        ResourceCard card3 = new ResourceCard(-1, Orientation.FRONT, color);\n\n        aux_personal_board.bruteForcePlaceCardSE(card1, 0, 0);\n        aux_personal_board.placeCardAtSE(card1, card2);\n        aux_personal_board.placeCardAtSE(card2, card3);\n\n    }\n\n    /**\n     * Symmetric method to the previous one\n     *\n     * @requires\n     *      color == GREEN || color == PURPLE\n     *\n     * @param color\n     */\n    public void init_objDecreasingDiagonal(Color color) {\n        ResourceCard card1 = new ResourceCard(-1, Orientation.FRONT, color);\n        ResourceCard card2 = new ResourceCard(-1, Orientation.FRONT, color);\n        ResourceCard card3 = new ResourceCard(-1, Orientation.FRONT, color);\n\n        aux_personal_board.bruteForcePlaceCardSE(card1, 2, 0);\n        aux_personal_board.placeCardAtNE(card1, card2);\n        aux_personal_board.placeCardAtNE(card2, card3);\n    }\n\n    @Override\n    public int calculateScore(PersonalBoard personal_board) {\n        return score_strategy.calculateScore(this, personal_board);\n    }\n\n}\n\n\n\n\n\n\n\n\n\n\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/it/polimi/ingsw/model/DiagonalPatternObjectiveCard.java b/src/main/java/it/polimi/ingsw/model/DiagonalPatternObjectiveCard.java
--- a/src/main/java/it/polimi/ingsw/model/DiagonalPatternObjectiveCard.java	(revision 776f31400755a039473194d082eb384ab1011a29)
+++ b/src/main/java/it/polimi/ingsw/model/DiagonalPatternObjectiveCard.java	(date 1711294527112)
@@ -49,7 +49,6 @@
         aux_personal_board.bruteForcePlaceCardSE(card1, 0, 0);
         aux_personal_board.placeCardAtSE(card1, card2);
         aux_personal_board.placeCardAtSE(card2, card3);
-
     }
 
     /**
Index: src/main/java/it/polimi/ingsw/model/Card.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package it.polimi.ingsw.model;\n\npublic class Card {\n    private int id;\n    public Orientation orientation;\n\n    /**\n     *\n     */\n    public Card(int id, Orientation orientation) {\n        this.id = id;\n        this.orientation = this.ChooseOrientation();\n\n    }\n\n    public Orientation ChooseOrientation(){\n        return orientation;\n    }\n\n}\n\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/it/polimi/ingsw/model/Card.java b/src/main/java/it/polimi/ingsw/model/Card.java
--- a/src/main/java/it/polimi/ingsw/model/Card.java	(revision 776f31400755a039473194d082eb384ab1011a29)
+++ b/src/main/java/it/polimi/ingsw/model/Card.java	(date 1711293244422)
@@ -10,7 +10,6 @@
     public Card(int id, Orientation orientation) {
         this.id = id;
         this.orientation = this.ChooseOrientation();
-
     }
 
     public Orientation ChooseOrientation(){
Index: src/main/java/it/polimi/ingsw/model/Game.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package it.polimi.ingsw.model;\n\nimport java.util.List;\nimport java.util.Queue;\nimport java.util.LinkedList;\n\npublic class Game {\n    private Queue<Player> playerQueue;\n    private int currentPlayerIndex;\n    private Player firstPlayer;\n    private boolean gameOver;\n    private CommonBoard common_board;\n    private ConcreteDeck resource_deck;\n    private ConcreteDeck gold_deck;\n\n\n    public Game(CommonBoard common_board) {\n        playerQueue = new LinkedList<>();\n        this.common_board = common_board; //initializes the board\n        dealCards();\n        while (!isGameOver()) {\n            // Loop through players and handle each player's turn\n            for (Player player : playerQueue) {\n                //placeCard(chooseCardToPlayFromHand());\n                updatePersonalScore(currentPlayerIndex);\n                drawCard(); //TODO: pesco da terra o dal mazzo a seconda di cosa sceglie l'utente\n            }\n            gameOver = isGameOver();\n        }\n        lastTurn();\n        calculateFinalScores();\n\n\n        // Perform end game actions (e.g., display winner)\n    }\n\n    public void addPlayer(Player player) {\n        playerQueue.add(player);\n    }\n\n\n    public void dealCards() {\n        // Deal cards to players\n        for (Player player : playerQueue) {\n            // Deal 2 cards from the resource deck\n            for (int i = 0; i < 2; i++) {\n                if (!resource_deck.isEmpty()) {\n                    Card card = resource_deck.pop(); // Remove the top card from the resource deck\n                    player.addToHand(card); // Add the card to the player's hand\n                }\n            }\n\n            // Deal 1 card from the gold deck\n            if (!gold_deck.isEmpty()) {\n                Card card = gold_deck.pop(); // Remove the top card from the gold deck\n                player.addToHand(card); // Add the card to the player's hand\n            }\n\n            //TODO: capire se vogliamo prendere 2 obiettivi dal deck obiettivi o scegliere 2 carte a caso\n        }\n    }\n\n\n    public int getCurrentPlayer() {\n        return currentPlayerIndex;\n    }\n\n\n    public void calculateFinalScores() {\n        // Calculate final scores\n        //Riceve da commonBoard le posizioni dell'ultimo giro + da personalBoard i punteggi degli obiettivi, per ciascun giocatore\n        //somma per ogni giocatore\n    }\n\n    public boolean isGameOver() {\n        return gameOver;\n    }\n\n//    public Card chooseCardToPlayFromHand() {\n//\n//    }\n\n    public void placeCard(Card card_chosen) {\n\n    }\n\n    public void updatePersonalScore(int currentPlayerIndex){\n\n    }\n\n    public void drawCard(){\n       //pattern dividere tra pesca da mazzo o dal banco (metodi già scritti in CommonBoard)\n    }\n\n    public void lastTurn(){\n        //gestisce il settaggio del partial_winner + tiene conto del fatto che sto giocando l'ultimo turno\n        //movePlayer (In commonBard notifica quando si arriva a 20, il game fa finire il turno corrente, ne fa fare un'altro completo\n        //e poi arresta il gioco\n    }\n\n\n    // Additional methods and logic as needed\n}\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/it/polimi/ingsw/model/Game.java b/src/main/java/it/polimi/ingsw/model/Game.java
--- a/src/main/java/it/polimi/ingsw/model/Game.java	(revision 776f31400755a039473194d082eb384ab1011a29)
+++ b/src/main/java/it/polimi/ingsw/model/Game.java	(date 1711296311530)
@@ -24,6 +24,7 @@
                 //placeCard(chooseCardToPlayFromHand());
                 updatePersonalScore(currentPlayerIndex);
                 drawCard(); //TODO: pesco da terra o dal mazzo a seconda di cosa sceglie l'utente
+
             }
             gameOver = isGameOver();
         }
@@ -92,10 +93,22 @@
        //pattern dividere tra pesca da mazzo o dal banco (metodi già scritti in CommonBoard)
     }
 
-    public void lastTurn(){
-        //gestisce il settaggio del partial_winner + tiene conto del fatto che sto giocando l'ultimo turno
-        //movePlayer (In commonBard notifica quando si arriva a 20, il game fa finire il turno corrente, ne fa fare un'altro completo
-        //e poi arresta il gioco
+    public void LastTurn(){
+        for (int i = 0; i < num_players; i++) {
+            Player currentPlayer = playerQueue.poll();
+            //il giocatore gioca
+            playerQueue.offer(currentPlayer); // Rimetti il giocatore corrente in fondo alla coda
+        }
+    }
+
+
+    public void secondLastTurn(){
+        for (int i = currentPlayerIndex; i < num_players; i++) {
+            Player currentPlayer = playerQueue.poll();
+            //il giocatore gioca
+            playerQueue.offer(currentPlayer); // Rimetti il giocatore corrente in fondo alla coda
+        }
+        LastTurn();
     }
 
 
